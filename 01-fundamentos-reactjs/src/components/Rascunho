Programação imperativa:
- Nós dizemos para o nosso software o que deve ser feito
- Dizemos o passo-a-passo de como deve ser feito
- Por exemplo, em uma receita de bolo, dizemos passo-a-passo de como fazer aquele bolo
- event.target.comment.value = '' -> Neste código, estamos informando que ele deve limpar o valor (value) que está na textarea (comment)
- Ligar o forno a 180 graus.
- Colocar a massa numa tigela.
- Colocar a massa dentro do forno quente.

Programação declarativa:
- No react, não costumamos usar a programação imperativa, mas a declarativa
- Ao invés de eu dizer o passo-a-passo de como se deve fazer, eu passo o resultado que eu espero.
- Quais as condições para eu ter o resultado final.
- Por exemplo, em uma receita de bolo, eu não digo o passo-a-passo para fazer aquele bolo. Eu digo as consdições necessárias para eu assar aquele bolo.
- Para assar o bolo, eu preciso que o forno esteja a 180 graus. Quando o forno estiver quente, posso colocar a massa para assar.
- Perceba que não estou dizendo como você vai fazer aquele bolo, mas sim, estou dizendo as condiçÕes para você fazer aquele bolo, sem as quais o bolo não assaria.
- Eu falo quais são as condições para as coisas acontecerem, mas não falo o passo-a-passo.

Key no React:
- Para cada lista (array) que eu percorro, eu preciso de uma chave única que identifique essa lista.
- Se eu percorrer um array com o map em um componente, por exemplo, como cada item do array é único, eu preciso de uma chave que identifique e torne cada componente renderizado como único.
- Por que a key precisa ser única? Porque existem três momentos em que um componente é rederizado(calculado novamente) no react. Ou seja, sempre que é colocado um novo comentário, o componente é rederizado novamente, calculado novamente. Isso porque eu mudei o estado que adiciona um novo comentário e, como alterei esse estado, o componente é rederizado novamente.
- 1 - Sempre que algum estado mudar, sofrer uma alteração, tudo é executado de novo. Nesse caso, o estado vai mudar se um dos estados (comments, newCommentText) que eu estou utilizando mudar. Ou seja, para cada novo comentário criado e adicionado no array, todo o meu componente vai ser recalculado e executado novamente. Ou seja, vai ser rederizado novamente.
- 2 - Quando a propriedade altera. No post, por exemplo, se a propriedade author mudar, todo o conteúdo, todo o código do post vai calculado novamnte.
- 3 - Quando um componente pai renderiza novamente. Se o componente pai for renderizado novamente, todos os componentes filhos vão ser recalculados novamente me tela.
- Esse fluxo de renderização do react pode ser lento, principalmente se for uma lista (array) com muitos comentários. Imagine que no meu componente App tenha 500 posts e ele precise ser renderizado. Isso significa que todos os 500 posts terão que ser recalculados do total 0, isto é, todo o html dos 500 posts vão ter que serem criados do zero.
- Agora, imagine que eu tenho 4 posts com as keys 1, 2, 3 e 4. Se, por algum dos três motivos citados acima, o react precisar renderizar os componentes post, ele não vai renderizar, calcular do total zero. Ele vai comparar a key dos componentes que já estavam na tela antes com os possíveis novos posts que virão a aparecer na interface.
- "Opa, estou renderizando essa lista de posts de novo porque tenho um post novo. Vou verificar os posts que eu já tenho com base na sua key. O 1 eu já tenho, não preciso. O 2 eu já tenho, não preciso. O 3 eu já tenho, não preciso. O 4 eu já tenho, não preciso. Opa, o 5 eu não tenho, então, preciso mostrar esse em tela."
- A key ajuda o react a enteder o que já estava em tela e o que não estava. O que já estava em tela, ele não mexe mais. Esta aí a importância de ser única, pois, se tiver duas keys iguais, poe exemplo, o react não vai saber o que estava em tela e o que não estava. Assim, ele só renderiza o que não estava e poupa tempo.
- Mas, se todo array tem um índice, por que não posso usar esse índice na key? Vamos supoer que você tem uma lista com as posições 1, 2, 3, 4 e 5, isso significa que eu tenho os índices 0, 1, 2, 3 e 4. Se, por algum motivo, você trocar os itens de posição, por exemplo, trocar o 3 e o 5, os índices nãO vão ser alterados, ou seja, o 5, agora, não vai estar mais na posição 4, e sim, na posição 2. Se eu colocar o índice como chave, o react vai perceber que aquele índice foi alterado e vai ter que renderizar aquilo de novo, posi aquela key foi mexida, então, ele precisa atualizar.
- O react vai chegar no índice 2 e vai perceber que algo aconteceu, não é mais o mesmo post de antes. Logo, ele vai renderizar de novo. E isso vai criar uma lentidão desnecessária.
- Por isso, eu preciso de um identificador que prove que aquela informação é única e seja sempre única, não importa o que eu faça.
- Resumindo, se a lista de componentes precisar ser renderizada novamente, e esse componente possuir uma chave, o react vai entender que esse componente já existe na tela e vai enteder também que não precisar renderizar de novo, pois já existe. Agora, se não tiver uma key, e a lista de componentes precisar ser renderizada de novo, o react não vai saber qual já estava em tela e qual não estava. Assim, ele não só vai renderizar o novo comentário, como também vai renderizar todos os comentárrios. Causando uma lentidão no sistema.

Closures no React:

function Comment(props){
    const [like, setLikes] = useState(0)
    function handleLikeComment(){
        setLikeCount(likeCount + 1) //Isso, para o react, é como se ele criasse um novo "parâmetro" para o componente Comment(props, 0), no qual esse novo "parâmetro" é o resultado, que com o tempo fica assim Comment(props, 1), Comment(props, 2).
    }
}
 Quando Comment(props, 1), o react cria uma nova vesão do componente. 

 Para cada vez que eu mudo o estado like, o react cria um novo contexto para aquele componente. Mas cada código que eu executo aqui setLikeCount(likeCount + 1), logo após eu alterar o estado, eu ainda to trabalhando com o contexto anterior, que, seguindo a lógica, será sempre Comment(props, 0). Assim, o estado like sempre será 0.

 Resumindo, cada vez que eu dou um like (setLikeCount(likeCount + 1)), eu atualizo o estado like. E cada vez que eu atualizo, e sempre que um estado muda, o react faz uma nova renderização, fazendo com aquele valor sempre seja 0 

 Para resolver isso, eu posso criar uma variável newLikeCount = likeCount + 1. Agora vai dar certo porque, diferente do estado, ela vai ter aquela variável atualizada, porque quem está atualizando não é o estado, é a variável

 Ou, eu posso criar uma função, no qual retorno um novo valor. Mas para isso, eu tenho que passar como argumento o valor mais recente de likeCount que, como é um argumento, pode ser qualquer nome

 SEMPRE QUE VOCÊ FOR ATUALIZAR UMA INFORMAÇÃO, E ESSA INFORMAÇÃO DEPENDE DO VALOR QUE ELA TINHA ANTERIORMENTE, OU SEJA, DEPENADE DELA MESMA, É SEMPRE LEGAL FAZER ESSA ATUALIZAÇÃO POR MEIO DESSE PADRÃO DE FUNÇÃO

 Tipagem dinâmica e estática:
 -No javaScript, podemos alterar o valor de uma vriável a qualquer momento, por exemplo:
 - const name = 'Diego'
 - name = 3
 - Isso é bom, porque traz dinamismo. Antes uma coisa era uma string e agora eu jogo um número no lugar. Mas é ruim porque abre portas para cometermos muitos erros na aplicação
- Além do typeScript ajudar a não cometer erros, principalmente em relação ao tipo das variáveis, ele ajuda muito no desenvolvimento da aplicação, porque ele traz inteligência ao nosso editor de código, ou seja, por exemplo, se você der um ctrl espaço em um objeto que falta alguma propriedade, o typeScript mostrará a você o que falta


-Mas, no typeScript, eu não preciso tipar tudo, pois ele tem um funcionamento interno chamado inferência de tipos. 
-Por exemplo, se você criar uma função, não precisa tipar ela. Ao olhar para o código, o typeScript já identifica que aquela função retorna um número, por exemplo. Mas, se ele não entender automaticamente a tipagem, ele te avisará.

-Mas, qual é a importância do typeScript? Porque, por mais que no javaScript podemos mudar a tipagem de uma variável a qualquer momento, uma hora ele dará erro, só que ele mostrará para você depois de rodar a aplicação. O typeScript já avisa que dará erro antes, além de ganhar inteligência no editor, pois ele mostr no ctrl espaço o que está acontecendo e o que falta
-Se você passar uma string em uma variável que recebe número, o javaScript só vai te mostrar quando a aplicação rodar, mas o typeScript mostrará na hora para você que aquilo está errado.
- TypeScript te avisa dos erros antes de acontecerem, coisa que o javaScript só avisaria depois.
- Um exemplo prático, imagine que temos uma interface com as propriedades nome, idade e bio. Queremos trazer estas informações em algum lugar na nossa aplicação. Se passarmos só nome, o javaScript informará erro, mas até você descobrir, perderá muito tempo. O typeScript te avisará na hora que algo está errado e ainda mostraria no ctrl espaço o que está faltando, que nesse caso é idade e bio.

-Escrever um código em javaScript sem typeScript é como entregar uma história sem rascunho, no futuro você o tanto de erros. 
-Agora, se usar o typeScript, você fará primeiro um rascunho, o que te evitará problemas futuramente.

Funcionalidades do typeScript:
-Ele revisa seu código antes de rodá-lo, evitando problemas para você futuramente.
-O seu editor de código fornece autocompletar e sugestões inteligentes, te ajudando a enteder o que está acontecendo e a lembrar nome de variáveis e funções.
-Ele permite que você veja quais tipos de dados são esperados e retornados pelas funções.
-Se você precisar mudar alguma coisa no seu código, o typeScript garante que você não vai quebrar outras partes do sistema. Se der algum conflito, ele te avisará.

Resumindo, o typeScript é importante porque te ajuda a encontrar erros no código antes de você rodá-lo, oferece sugestões enquanto você digita, facilita a manutenção do código e garante que mudanças não quebrem outras partes do sistema.
Antes que dê pane no sistema inteiro e você não se achar mais, o typeScript te alertará antes que isso aconteça.